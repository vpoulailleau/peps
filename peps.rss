<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>Newest Python PEPs</title>
    <link>https://peps.python.org/peps.rss</link>
    <description>Newest Python Enhancement Proposals (PEPs) - Information on new language features, and some meta-information like release procedure and schedules.</description>
    <atom:link href="https://peps.python.org/peps.rss" rel="self"/>
    <docs>https://cyber.harvard.edu/rss/rss.html</docs>
    <language>en</language>
    <lastBuildDate>Thu, 31 Mar 2022 06:40:03 GMT</lastBuildDate>
    <item>
      <title>PEP 686: Make UTF-8 mode default</title>
      <link>https://peps.python.org/pep-0686/</link>
      <description>This PEP proposes enabling UTF-8 mode by default.</description>
      <author>Inada Naoki (songofacandy@gmail.com)</author>
      <guid isPermaLink="true">https://peps.python.org/pep-0686/</guid>
      <pubDate>Fri, 18 Mar 2022 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>PEP 685: Comparison of extra names for optional distribution dependencies</title>
      <link>https://peps.python.org/pep-0685/</link>
      <description>This PEP specifies how to normalize distribution extra names when performing comparisons. This prevents tools from either failing to find an extra name, or accidentally matching against an unexpected name.</description>
      <author>Brett Cannon (brett@python.org)</author>
      <guid isPermaLink="true">https://peps.python.org/pep-0685/</guid>
      <pubDate>Tue, 08 Mar 2022 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>PEP 684: A Per-Interpreter GIL</title>
      <link>https://peps.python.org/pep-0684/</link>
      <description>Since Python 1.5 (1997), CPython users can run multiple interpreters in the same process.  However, interpreters in the same process have always shared a significant amount of global state.  This is a source of bugs, with a growing impact as more and more people use the feature.  Furthermore, sufficient isolation would facilitate true multi-core parallelism, where interpreters no longer share the GIL.  The changes outlined in this proposal will result in that level of interpreter isolation.</description>
      <author>Eric Snow (ericsnowcurrently@gmail.com)</author>
      <guid isPermaLink="true">https://peps.python.org/pep-0684/</guid>
      <pubDate>Tue, 08 Mar 2022 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>PEP 683: Immortal Objects, Using a Fixed Refcount</title>
      <link>https://peps.python.org/pep-0683/</link>
      <description>Currently the CPython runtime maintains a small amount of mutable state in the allocated memory of each object.  Because of this, otherwise immutable objects are actually mutable.  This can have a large negative impact on CPU and memory performance, especially for approaches to increasing Python's scalability.</description>
      <author>Eric Snow (ericsnowcurrently@gmail.com), Eddie Elizondo (eduardo.elizondorueda@gmail.com)</author>
      <guid isPermaLink="true">https://peps.python.org/pep-0683/</guid>
      <pubDate>Thu, 10 Feb 2022 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>PEP 682: Format Specifier for Signed Zero</title>
      <link>https://peps.python.org/pep-0682/</link>
      <description>Though float and Decimal types can represent signed zero, in many fields of mathematics negative zero is surprising or unwanted -- especially in the context of displaying an (often rounded) numerical result.  This PEP proposes an extension to the string format specification allowing negative zero to be normalized to positive zero.</description>
      <author>John Belmonte (john@neggie.net)</author>
      <guid isPermaLink="true">https://peps.python.org/pep-0682/</guid>
      <pubDate>Sat, 29 Jan 2022 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>PEP 679: Allow parentheses in assert statements</title>
      <link>https://peps.python.org/pep-0679/</link>
      <description>This PEP proposes to allow parentheses surrounding the two-argument form of assert statements. This will cause the interpreter to reinterpret what before would have been an assert with a two-element tuple that will always be True (assert (expression, message)) to an assert statement with a subject and a failure message, equivalent to the statement with the parentheses removed (assert expression, message).</description>
      <author>Pablo Galindo Salgado (pablogsal@python.org)</author>
      <guid isPermaLink="true">https://peps.python.org/pep-0679/</guid>
      <pubDate>Fri, 07 Jan 2022 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>PEP 680: tomllib: Support for Parsing TOML in the Standard Library</title>
      <link>https://peps.python.org/pep-0680/</link>
      <description>This PEP proposes adding the tomllib module to the standard library for parsing TOML (Tom's Obvious Minimal Language, https://toml.io).</description>
      <author> (Taneli), Shantanu Jain (hauntsaninja at gmail.com)</author>
      <guid isPermaLink="true">https://peps.python.org/pep-0680/</guid>
      <pubDate>Sat, 01 Jan 2022 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>PEP 678: Enriching Exceptions with Notes</title>
      <link>https://peps.python.org/pep-0678/</link>
      <description>Exception objects are typically initialized with a message that describes the error which has occurred.  Because further information may be available when the exception is caught and re-raised, or included in an ExceptionGroup, this PEP proposes to add BaseException.add_note(note), a .__notes__ attribute holding a list of notes so added, and to update the builtin traceback formatting code to include notes in the formatted traceback following the exception string.</description>
      <author>Zac Hatfield-Dodds (zac@zhd.dev)</author>
      <guid isPermaLink="true">https://peps.python.org/pep-0678/</guid>
      <pubDate>Mon, 20 Dec 2021 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>PEP 677: Callable Type Syntax</title>
      <link>https://peps.python.org/pep-0677/</link>
      <description>This PEP introduces a concise and friendly syntax for callable types, supporting the same functionality as typing.Callable but with an arrow syntax inspired by the syntax for typed function signatures. This allows types like Callable[[int, str], bool] to be written as (int, str) -&gt; bool.</description>
      <author>Steven Troxler (steven.troxler@gmail.com)</author>
      <guid isPermaLink="true">https://peps.python.org/pep-0677/</guid>
      <pubDate>Mon, 13 Dec 2021 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>PEP 681: Data Class Transforms</title>
      <link>https://peps.python.org/pep-0681/</link>
      <description>PEP 557 introduced the dataclass to the Python stdlib. Several popular libraries have behaviors that are similar to dataclasses, but these behaviors cannot be described using standard type annotations. Such projects include attrs, pydantic, and object relational mapper (ORM) packages such as SQLAlchemy and Django.</description>
      <author>Erik De Bonte (erikd at microsoft.com)</author>
      <guid isPermaLink="true">https://peps.python.org/pep-0681/</guid>
      <pubDate>Thu, 02 Dec 2021 00:00:00 GMT</pubDate>
    </item>
  </channel>
</rss>
